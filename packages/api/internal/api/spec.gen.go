// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
