// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD///yuLjpJugAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
